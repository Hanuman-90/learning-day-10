class InsufficientBalanceException extends Exception {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

class InvalidAmountException extends Exception {
    public InvalidAmountException(String message) {
        super(message);
    }
}

class BankAccount {
    private String accountHolder;
    private double balance;

    public BankAccount(String name, double balance) {
        this.accountHolder = name;
        this.balance = balance;
    }

    public void deposit(double amount) throws InvalidAmountException {
        if (amount <= 0) {
            throw new InvalidAmountException("Amount must be greater than zero.");
        }
        balance += amount;
        System.out.println("Deposited: " + amount);
    }

    public void withdraw(double amount) throws InsufficientBalanceException, InvalidAmountException {
        if (amount <= 0) {
            throw new InvalidAmountException("Amount must be greater than zero.");
        }
        if (amount > balance) {
            throw new InsufficientBalanceException("Insufficient funds. Current balance: " + balance);
        }
        balance -= amount;
        System.out.println("Withdrawn: " + amount);
    }

    public void getBalance() {
        System.out.println("Current Balance: " + balance);
    }
}

public class BankSystemDemo {
    public static void main(String[] args) {
        BankAccount account = new BankAccount("John", 1000.0);
        try {
            account.deposit(500);
            account.withdraw(200);
            account.withdraw(2000);  // Will throw exception
        } catch (InsufficientBalanceException | InvalidAmountException e) {
            System.out.println("Transaction error: " + e.getMessage());
        }
        account.getBalance();
    }
}
